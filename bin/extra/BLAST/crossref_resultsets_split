#! /usr/bin/ruby
#
#  By Pjotr Prins and Erin Bakker (c) Lab. of Nematology, Wageningen University 2009
#  See the biotools LICENSE file
#  
#  A more elaborate version of the generic ./bin/blast_crossref_resultsets. This
#  version splits up results based on identifiers, sorts on p-value and takes
#  account of BAC position.
#
#  List the results of a BLAST XML file (-m7) by hits. The BLAST file is post-
#  processed to find all hits with their original searches. All results are
#  parsed and each sequence that is hit is listed with the original search
#  sequences it matches (cross-referencing hits).
#
#  So if BLAST queries with sequence Q1, Q2 and Q3 are executed each of these
#  returns a result set containing hits. If a hit H is shared between queries
#  Q2 and Q3 it will be listed like:
#
#  H: Q2 Q3
#
#  and so on for all hits.
#
#  This can be useful when BLASTing datasets against themselves. Rather then
#  having to BLAST all hits again to find their homologues. For example 
#  blasting a set of known genes against BAC's.
#
#  If the XML file is large it may be worth splitting it with the
#  blast_split_xml script (BioRuby loads the full DOM into RAM).
#
#  Usage:
#
#     blast_crossref_resultsets --split id1,id2 xmlfile(s) > by_hit.csv
#

require 'bio'

program = version = db = nil

if ARGV[0] == '--split' or ARGV[0] == '-s'
  ARGV.shift
  splitters = ARGV[0].split(/,/)
  ARGV.shift
end

$stderr.print "Splitting on #{splitters.join(',')}" if splitters

# Store the information 'efficiently'
class HitInfo
  attr_reader :search_id, :evalue, :from, :to
  def initialize search_id, evalue, from, to
    @search_id = search_id.strip
    @evalue = evalue
    @from = from
    @to   = to
  end

  # The +id+ divides the search results according to criteria on the BAC (original
  # sequence). By adding the group name hit location a unique id is created.
  def id hit, splitters
    # combine each hit id and defintion to a single string
    my_id = hit.hit_id+'|'+hit.definition
    if splitters
      # Group the located values according to a textual identifier
      # and add the identifier to the indexer
      splitters.each do | group |
        if @search_id =~ /#{group}/i
          my_id = my_id + '|' + group
        end
      end
    end
    my_id
  end

  def pretty
    search_id+" (#{from}-#{to}; E=#{evalue})"
  end

  def <=> item
    evalue <=> item.evalue
  end
end

class HitInfoList < Array
end

class Bin 
  attr_reader :items

	def initialize
		@items = []
	end

  def add item
	  @start = item.from if @start==nil
		@start = [item.from,@start].min
	  @stop = item.to if @stop==nil
		@stop  = [item.to,@stop].max
		@items.push item
	end

	# check if item it is a fit in this bin
  def isfit? item
	  # both are inside
	  return true if item.from >= @start and item.to <= @stop
		# both are outside
		return true if item.from < @start and item.to > @stop
		# either one is inside
		return true if item.from > @start and item.from < @stop
		return true if item.to > @start and item.to < @stop
		false
	end

	def pretty
		"|#{@start}:#{@stop}"
	end
end

class CrossRefMap < Hash

	# Yield the list split by size
	def each_by_size
	  keys.sort.each do | k |
		  list = self[k]
			bins = []
      for item in list
				# fits existing bin?
				fit = false
				for bin in bins
				  if bin.isfit?(item)
					  bin.add(item)
						fit = true
					end
				end
        if not fit
				  bin = Bin.new
					bin.add(item)
					bins.push bin
				end
			end
			for bins in bins
				yield k+bin.pretty, bin.items
			end
		end
		# each do | ref, list |
		#   yield ref,list
		# end
  end
end

crossref = CrossRefMap.new
for fn in ARGV do 
  if !File.exist? fn
    print "\nFile #{fn} does not exist"
    next
  end
  $stderr.print "\nParsing #{fn}..."

  Bio::Blast.reports(File.new(fn)).each do |rep| # for multiple xml reports
    program = rep.program
    version = rep.version
    db = rep.db
    rep.iterations.each do |itr|
      if itr.hits.size > 0
        # combine query id and definition to a single string
        search_id = itr.query_id+'|'+itr.query_def
        itr.hits.each do |hit|
          # add the hit to the crossref_id or BAC_id
          hitinfo = HitInfo.new(search_id, hit.evalue, hit.query_start, hit.query_end)
          id = hitinfo.id(hit,splitters)
          crossref[id] = [] if crossref[id] == nil
          # store the query id against the hit id
          crossref[id].push hitinfo
        end
      end
    end
  end
end

print program,"\n"
print version,"\n"
print db,"\n"
# Print each crossref_id or BAC_id with matching hits by location
crossref.each_by_size do | k, set |
  # p set.size
  # next if set.size == 1      # skip singletons
  print '"',k,'",'
  set.sort.each do | item |
    print '"',item.pretty,'",'
  end
  print "\n"
end


